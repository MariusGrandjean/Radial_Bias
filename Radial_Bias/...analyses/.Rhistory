packages = c("tidyverse",
"magrittr",
"readxl",
"Rmisc" ,
"ggplot2",
"reshape2",
"lme4",
"lmerTest",
"modelbased",
"ggeffects",
"plot3D",
"viridis",
"quickpsy")
## Now load or install&load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
customtheme <- theme_bw() +
theme(
panel.background = element_rect(fill = 'white'),
axis.line = element_blank(),
strip.background = element_rect(fill = 'white', color = "white"),
strip.placement = 'outside',
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(2, "lines"),
axis.text = element_text(colour = "black"),
plot.title = element_text(hjust = 0.5),
text = element_text(size = 20))
palette <- c("blue", "mediumseagreen")
df <-
list.files(path = "C:/Users/Marius/Dropbox/Travail/UCLouvain/PhD/Projet/Projet-Saccades/Tasks/Radial_Bias/Radial_Bias/data", full.names = TRUE, pattern = "*.csv") %>%
map_df(~read_csv(.))
View(df)
df <- df %>%
mutate(contrastINT = as.integer(contrast*100)) %>%
mutate(contrastbin = ntile(contrastINT, n=6))
df <- df %>%
mutate(
VF =
case_when(
VF == "left"  ~ "Gauche",
VF == "right" ~ "Droit",
VF == "up" ~ "Haut",
VF == "down" ~ "Bas",
TRUE ~ VF
),
ori =
case_when(
ori == "oriH" ~ "Orientation = horizontale",
ori == "oriV" ~ "Orientation = verticale",
TRUE ~ ori
)
)
df$VF <- factor(df$VF, levels = c("Gauche","Droit","Haut","Bas"))
View(df)
df_fit <- df %>%
# filter(eccentricity == '15dva') %>%
group_by(meridian, VF, ori, contrastbin) %>%
dplyr::summarise(meanAcc = mean(accuracy))
df_fit$VF <- factor(df_fit$VF, levels = c("Gauche","Droit","Haut","Bas"))
df_fit %<>%
mutate(meanAcc = ifelse(meanAcc < 0.25, 0.25, meanAcc))
View(df_fit)
fitH <-
quickpsy(
df_fit %>% filter(meridian == "meridianH"),
x = contrastbin,
k = meanAcc,
grouping = c("ori", "VF"),
#xperimental factors
fun = cum_normal_fun,
#model = cumulative normal function
guess = 0.25,
#chance level
lapses = TRUE,
#for lapse rate
bootstrap = 'none',
#bootstrap of parameters (swich on: 'parametric' or 'nonparametric')
# B = 500,
#number of bootstrap samples
parini = list(c(1, 6), c(0.1, 8), c(0, .1)) #pas obligatoire mais pafois ça fit mieux en forçant les paramètres initiaux (sinon enlever la ligne et il a des parametres par defaut)
)
df %>%
filter(meridian == "meridianH") %>%
group_by(eccentricity, VF, ori, contrastbin) %>%
dplyr::summarise(meanAcc = mean(accuracy),
n = n()) %>%
ggplot(aes(x = contrastbin, y = meanAcc, color = ori)) +
geom_point(aes(size = n)) +
# geom_line() +
geom_line (data = fitH$curves, aes(x = x, y = y, color = ori), size = 2, alpha = 0.6) +
geom_linerange(data = fitH$thresholds,
aes_string(x = "thre", ymin = fitH$guess, ymax = fitH$thresholds$prob), inherit.aes = FALSE,
color = c(palette[1],palette[1],palette[2],palette[2]),
size = 1) +
facet_grid(~VF) +
geom_hline(yintercept = 0.25, color = "black", size = 0.5) +
geom_hline(yintercept = 0.625, color = "black", linetype = "dotted", size = 0.5) +
scale_x_continuous(breaks = seq(1, 6, 1)) +
scale_y_continuous(breaks = c(0, 0.25, 0.5, 0.63, 0.75, 1), limits = c(0,1)) +
scale_color_manual(values = palette) +
scale_size(guide = 'none') +
labs(x = "Contraste", y = "Précision moyenne") +
customtheme +
theme(legend.position = "none",
legend.title = element_blank()) #+
# ggtitle('Méridien horizontal')
thr.H <- fitH$thresholds
thr.H %>% ggplot(aes(x = VF, y = thre, fill = ori, color = ori)) +
geom_col(
stat = "identity",
position = position_dodge(width = 0.9),
width = 0.8,
alpha = 0.2,
size = 1
) +
scale_color_manual(values = palette) +
scale_fill_manual(values = palette) +
scale_y_continuous(breaks = c(0, 1, 2, 3, 4, 5, 6), limits = c(0,6)) +
labs(x = "Champ visuel", y = "Seuil de détection") +
customtheme +
theme(legend.position = "none",
legend.title = element_blank())
fitV <-
quickpsy(
df_fit %>% filter(meridian == "meridianV"),
x = contrastbin,
k = meanAcc,
grouping = c("ori", "VF"),
#xperimental factors
fun = cum_normal_fun,
#model = cumulative normal function
guess = 0.25,
#chance level
lapses = TRUE,
#for lapse rate
bootstrap = 'none',
#bootstrap of parameters (swich on: 'parametric' or 'nonparametric')
# B = 500,
#number of bootstrap samples
parini = list(c(1, 6), c(0.1, 8), c(0, .1)) #pas obligatoire mais pafois ça fit mieux en forçant les paramètres initiaux (sinon tu peux enlever la ligne et il a des parametres par defaut)
)
df %>%
filter(meridian == "meridianV") %>%
group_by(eccentricity, VF, ori, contrastbin) %>%
dplyr::summarise(meanAcc = mean(accuracy),
n = n()) %>%
ggplot(aes(x = contrastbin, y = meanAcc, color = ori)) +
geom_point(aes(size = n)) +
geom_line (data = fitV$curves, aes(x = x, y = y, color = ori), size = 2, alpha = 0.6) +
geom_linerange(data = fitV$thresholds,
aes_string(x = "thre", ymin = fitH$guess, ymax = fitH$thresholds$prob), inherit.aes = FALSE,
color = c(palette[1],palette[1],palette[2],palette[2]),
size = 1) +
facet_grid(~VF) +
geom_hline(yintercept = 0.25, color = "black", size = 0.5) +
geom_hline(yintercept = 0.625, color = "black", linetype = "dotted", size = 0.5) +
scale_x_continuous(breaks = seq(1, 6, 1)) +
scale_y_continuous(breaks = c(0, 0.25, 0.5, 0.63, 0.75, 1), limits = c(0,1)) +
scale_color_manual(values = palette) +
scale_size(guide = 'none') +
labs(x = "Contraste", y = "Précision moyenne") +
customtheme +
theme(legend.position = "none",
legend.title = element_blank()) #+
# ggtitle('Méridien vertical')
thr.V <- fitV$thresholds
thr.V %>% ggplot(aes(x = VF, y = thre, fill = ori, color = ori)) +
geom_col(
stat = "identity",
position = position_dodge(width = 0.9),
width = 0.8,
alpha = 0.2,
size = 1
) +
scale_color_manual(values = palette) +
scale_fill_manual(values = palette) +
scale_y_continuous(breaks = c(0, 1, 2, 3, 4, 5, 6), limits = c(0,6)) +
labs(x = "Champ visuel", y = "Seuil de détection") +
customtheme +
theme(legend.position = "none",
legend.title = element_blank())
View(thr.V)
sim.H1 <- BFDA.sim(expected.ES=0.572, type="t.paired",
prior=list("normal",list(prior.mean=0, prior.var=1)),
n.min=30, n.max=100, alternative="greater", boundary=c(1/6,6), B=1000,
verbose=TRUE, cores=4, stepsize = 5)
library(devtools)
library(BFDA)
sim.H1 <- BFDA.sim(expected.ES=0.572, type="t.paired",
prior=list("normal",list(prior.mean=0, prior.var=1)),
n.min=30, n.max=100, alternative="greater", boundary=c(1/6,6), B=1000,
verbose=TRUE, cores=4, stepsize = 5)
sim.H0 <- BFDA.sim(expected.ES=0, type="t.paired",
prior=list("normal", list(prior.mean=0, prior.var=1)),
n.min=30, n.max=100, alternative="greater", boundary=c(1/6,6), B=1000,
verbose=TRUE, cores=4, stepsize = 5)
BFDA.analyze(sim.H1, design="sequential", n.min=30, n.max=100, boundary=c(1/6,6))
BFDA.analyze(sim.H0, design="sequential", n.min=30, n.max=100, boundary=c(1/6,6))
BFDA.analyze(sim.H1, design="sequential", n.min=30, n.max=100, boundary=c(1/6,6))
sim.H1 <- BFDA.sim(expected.ES=0.572, type="t.paired",
prior=list("normal",list(prior.mean=0, prior.var=1)),
n.min=30, n.max=55, alternative="greater", boundary=c(1/6,6), B=1000,
verbose=TRUE, cores=4, stepsize = 5)
BFDA.analyze(sim.H1, design="sequential", n.min=30, n.max=55, boundary=c(1/6,6))
sim.H0 <- BFDA.sim(expected.ES=0, type="t.paired",
prior=list("normal", list(prior.mean=0, prior.var=1)),
n.min=30, n.max=55, alternative="greater", boundary=c(1/6,6), B=1000,
verbose=TRUE, cores=4, stepsize = 5)
BFDA.analyze(sim.H0, design="sequential", n.min=30, n.max=55, boundary=c(1/6,6))
plot(sim.H1, n.min=30, n.max=55, boundary=c(1/6, 6))
SSD(sim.H1)
sim.H1 <- BFDA.sim(expected.ES=0.572, type="t.paired",
prior=list("Cauchy",list(prior.location=0, prior.scale=sqrt(2)/2)),
n.min=30, n.max=55, alternative="greater", boundary=c(1/6,6), B=1000,
verbose=TRUE, cores=4, stepsize = 5)
BFDA.analyze(sim.H1, design="sequential", n.min=30, n.max=55, boundary=c(1/6,6))
